apply plugin: 'war'

ext {
    env = null
    props = new Properties()
}

allprojects {
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/central/'}
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        compile 'org.slf4j:slf4j-log4j12:1.7.25'
        compile 'org.apache.logging.log4j:log4j-api:2.8.2'
        compile 'org.apache.logging.log4j:log4j-core:2.8.2'
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
        compile 'org.springframework:spring-webmvc:4.3.9.RELEASE'
        compile 'org.springframework:spring-jdbc:4.3.9.RELEASE'
        compile 'org.springframework:spring-context-support:4.3.9.RELEASE'
        compile 'org.springframework:spring-aspects:4.3.9.RELEASE'
        compile 'org.springframework:spring-aop:4.3.9.RELEASE'
        compile 'com.google.guava:guava:22.0'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.8.4'
        compile 'com.fasterxml.jackson.core:jackson-core:2.8.4'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.4'
        compile 'com.alibaba:fastjson:1.2.34'
//        compile 'redis.clients:jedis:2.9.0'
        runtime group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
        runtime 'javax.servlet:jstl:1.2'
        compile 'junit:junit:4.12'

    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            filter(org.apache.tools.ant.filters.ReplaceTokens,
                    tokens: props
            )
        }
    }
}

task populateProdEnv << {
    env = 'prod'
}

task populateDevEnv << {
    env = 'dev'
}
task populateTestEnv << {
    env = 'test'
}

task populateProps << {

    printf env

    new File("${rootProject.projectDir}/configs/${env}/config.properties")
            .withInputStream {
        stream -> props.load(stream)
    }
    new File("${rootProject.projectDir}/configs/common.properties")
            .withInputStream {
        stream -> props.load(stream)
    }
}
populateProps.mustRunAfter populateTestEnv

task localRun(dependsOn: [allprojects.clean, populateDevEnv, populateProps, ':sub-webapp:jettyRun'])

task packageDevWar(dependsOn: [allprojects.clean, populateDevEnv, populateProps, ':sub-webapp:war'])
task packageProdWar(dependsOn: [allprojects.clean, populateProdEnv, populateProps, ':sub-webapp:war'])
task packageTestWar(dependsOn: [allprojects.clean, populateTestEnv, populateProps, ':sub-webapp:war'])

